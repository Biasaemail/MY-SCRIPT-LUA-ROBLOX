-- OptimizedAntiLagLighting V3.3 - Fokus Efisiensi, Lighting Netral, & Manajemen Memori
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local CollectionService = game:GetService("CollectionService")
local Debris = game:GetService("Debris")
local ScriptContext = game:GetService("ScriptContext")

local player = Players.LocalPlayer
local camera = workspace.CurrentCamera

-- Pengaturan Utama (Sesuaikan di sini)
local OPTIMIZATION_LEVEL = "High" -- Opsi: "High", "Medium", "Low".
local DEBUG_MODE = false          -- true untuk log detail di console

-- Konstanta Tag (untuk konsistensi dan menghindari typo)
local HEAVY_PARTICLE_TAG = "HeavyParticleEffect"
local LOD_MANAGED_TAG = "LOD_Managed"
local PLAYER_CHARACTER_TAG = "PlayerCharacter"
local IMPORTANT_NO_LOD_TAG = "ImportantNoLOD"
local IMPORTANT_SOUND_TAG = "ImportantSound"

-- Variabel Script
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local activeConnections = {}
local partsForLOD = {}
local partLODStates = {} -- Menyimpan state transparansi part untuk LOD
local lastLODUpdateTime = 0
local lodHeartbeatConnection = nil

-- Pengaturan LOD berdasarkan OPTIMIZATION_LEVEL
local ENABLE_ADVANCED_LOD = (OPTIMIZATION_LEVEL ~= "Low")
local LOD_UPDATE_INTERVAL = (OPTIMIZATION_LEVEL == "High") and 0.25 or 0.15
local LOD_PARTS_PER_UPDATE = (OPTIMIZATION_LEVEL == "High") and 40 or 60
local LOD_MAX_DISTANCE_BASE = (OPTIMIZATION_LEVEL == "High") and 160 or 220
local LOD_MIN_SIZE_ON_SCREEN_APPROX = 0.01 -- Ukuran minimal di layar sebelum transparan (perkiraan)
local LOD_TRANSITION_DURATION = 0.75 -- Durasi transisi fade in/out LOD

local function log(message)
	if DEBUG_MODE then
		print("[AntiLagV3.3]: " .. message)
	end
end

local function try(func, description, ...)
	local success, resultOrError = pcall(func, ...)
	if not success then
		warn(("[AntiLagV3.3 Error] Gagal %s: %s"):format(description or "eksekusi fungsi", tostring(resultOrError)))
	elseif DEBUG_MODE and description then
		log(("Berhasil %s"):format(description))
	end
	return success, resultOrError
end

local function cleanupConnections()
	log("Membersihkan " .. #activeConnections .. " koneksi aktif...")
	for _, conn in ipairs(activeConnections) do
		if conn and typeof(conn.Disconnect) == "function" then
			try(conn.Disconnect, "disconnect event")
		end
	end
	activeConnections = {}
end

-- Helper untuk menambah koneksi ke manajemen
local function addManagedConnection(connection)
	table.insert(activeConnections, connection)
end

log("Anti-lag script V3.3 inisialisasi untuk: " .. player.Name .. " | OptLevel: " .. OPTIMIZATION_LEVEL .. " | AdvLOD: " .. tostring(ENABLE_ADVANCED_LOD))

-- 1. Pengaturan Kualitas Rendering
try(function()
	local targetQualityLevel
	if OPTIMIZATION_LEVEL == "High" then
		targetQualityLevel = Enum.QualityLevel.Level01
	elseif OPTIMIZATION_LEVEL == "Medium" then
		targetQualityLevel = Enum.QualityLevel.Level03
	else -- Low
		targetQualityLevel = Enum.QualityLevel.Level05
	end

	if settings().Rendering.QualityLevel ~= targetQualityLevel then
		settings().Rendering.QualityLevel = targetQualityLevel
		log("QualityLevel diatur ke " .. tostring(targetQualityLevel))
	end

	-- UserInputService.SetQualityLevel hanya untuk antarmuka non-TenFoot
	if UserInputService and not UserInputService:IsTenFootInterface() then
		local ok, currentUISQuality = pcall(function() return UserInputService:GetQualityLevel() end)
		if ok and currentUISQuality ~= targetQualityLevel then
			UserInputService:SetQualityLevel(targetQualityLevel)
			log("QualityLevel diatur ke " .. tostring(targetQualityLevel) .. " via UserInputService.")
		end
	end
end, "set kualitas rendering")

-- 2. Manajemen Partikel Efek
try(function()
	local particleDisabledCount = 0
	local PARTICLE_CLASSES = {ParticleEmitter = true, Smoke = true, Fire = true, Explosion = true}

	local function processParticle(obj)
		if not obj or not obj.Parent or not PARTICLE_CLASSES[obj.ClassName] then return end

		if OPTIMIZATION_LEVEL == "High" or CollectionService:HasTag(obj, HEAVY_PARTICLE_TAG) then
			if obj.Enabled then
				obj.Enabled = false
				particleDisabledCount = particleDisabledCount + 1
			end
		elseif OPTIMIZATION_LEVEL == "Medium" then
			if obj:IsA("ParticleEmitter") then -- Hanya ParticleEmitter yang punya Rate & Lifetime
				obj.Rate = math.max(0.5, obj.Rate * 0.25)
				obj.Lifetime = NumberRange.new(math.max(0.1, obj.Lifetime.Min * 0.4), math.max(0.2, obj.Lifetime.Max * 0.4))
			end
		end
	end

	for _, descendant in ipairs(workspace:GetDescendants()) do
		if PARTICLE_CLASSES[descendant.ClassName] then
			processParticle(descendant)
		end
	end
	if particleDisabledCount > 0 then log("Menonaktifkan " .. particleDisabledCount .. " partikel berat/tag awal.") end

	addManagedConnection(workspace.DescendantAdded:Connect(function(descendant)
		if PARTICLE_CLASSES[descendant.ClassName] then
			task.defer(processParticle, descendant) -- Defer untuk menghindari yield pada event
		end
	end))
	log("Penanganan partikel dinamis diaktifkan.")
end, "kelola efek partikel")

-- 3. Pengaturan Pencahayaan Siang Hari Netral & Efisien
try(function()
	Lighting.Technology = Enum.Technology.Compatibility
	Lighting.ClockTime = 13.75
	Lighting.Brightness = 1.6
	Lighting.Ambient = Color3.fromRGB(155, 155, 155)
	Lighting.OutdoorAmbient = Color3.fromRGB(160, 160, 160)
	Lighting.ColorShift_Top = Color3.fromRGB(180, 190, 200)
	Lighting.ColorShift_Bottom = Color3.fromRGB(200, 205, 210)
	Lighting.GlobalShadows = (OPTIMIZATION_LEVEL ~= "High")
	Lighting.FogStart = 0
	Lighting.FogEnd = 100000
	Lighting.FogColor = Color3.fromRGB(195, 200, 205)
	Lighting.EnvironmentDiffuseScale = 0
	Lighting.EnvironmentSpecularScale = 0
	Lighting.ExposureCompensation = 0

	local atm = Lighting:FindFirstChildOfClass("Atmosphere")
	if atm then atm:Destroy() end
	local skyInstance = Lighting:FindFirstChildOfClass("Sky")
	if skyInstance then
		skyInstance:ClearAllChildren()
		Debris:AddItem(skyInstance, 0) -- Gunakan Debris untuk menghapus dengan aman
	end
	log("Pencahayaan siang hari netral & efisien diterapkan.")
end, "terapkan pengaturan pencahayaan")

-- 4. Penonaktifan Efek Visual Pencahayaan Tambahan
try(function()
	local visualEffectsToDisable = {
		BloomEffect = true, BlurEffect = true, SunRaysEffect = true,
		ColorCorrectionEffect = true, DepthOfFieldEffect = true
		-- ColorCorrection sudah termasuk dalam ColorCorrectionEffect jika itu maksudnya.
		-- Jika ada instance "ColorCorrection" terpisah (lama), bisa ditambahkan.
	}
	local disabledEffectCount = 0
	for _, effect in ipairs(Lighting:GetChildren()) do
		if visualEffectsToDisable[effect.ClassName] and effect.Enabled then
			effect.Enabled = false
			disabledEffectCount = disabledEffectCount + 1
		end
	end
	if disabledEffectCount > 0 then log("Menonaktifkan " .. disabledEffectCount .. " efek visual pencahayaan.") end
end, "kelola efek visual pencahayaan")

-- 5. Sistem LOD (Level of Detail) Lanjutan
if ENABLE_ADVANCED_LOD then
	local function getScreenSizeApproximation(part, cam)
		if not part or not cam then return 0 end
		local partPos = part.Position
		local distance = (cam.CFrame.Position - partPos).Magnitude
		if distance == 0 then return math.huge end -- Anggap sangat besar jika di posisi yang sama

		local radius = math.max(part.Size.X, part.Size.Y, part.Size.Z) * 0.5 -- Rata-rata atau max size lebih baik
		if radius == 0 then return 0 end

		-- Perkiraan berdasarkan FOV vertikal (umumnya FieldOfView adalah horizontal)
		local fovRad = math.rad(cam.FieldOfView)
		local screenHeight = 2 * distance * math.tan(fovRad / 2) -- Ini untuk FOV horizontal, perlu adj.
		if screenHeight == 0 then return 0 end
        -- Untuk FOV horizontal, ini lebih ke "screen width" part jika part spherical
        -- Mari kita gunakan pendekatan yang lebih sederhana dan umum untuk "ukuran di layar"
        -- (radius / distance) adalah rasio, kalikan dengan faktor terkait FOV
        -- Semakin besar FOV, semakin kecil objek tampak. Semakin kecil FOV, semakin besar.
        -- Faktor 1/tan(fov/2) bisa jadi terlalu sensitif.
        -- Lebih sederhana: (Radius / Distance) * (Konstanta / FOV)
        -- Atau, cukup (Radius/Distance) dan sesuaikan LOD_MIN_SIZE_ON_SCREEN_APPROX
		return (radius / distance) -- Ini adalah rasio ukuran terhadap jarak, cukup untuk perbandingan
	end

	local function isPartRelevantForLOD(part)
		if not part:IsA("BasePart") or part.Anchored or part:IsA("Terrain") then return false end
		if CollectionService:HasTag(part, PLAYER_CHARACTER_TAG) or CollectionService:HasTag(part, IMPORTANT_NO_LOD_TAG) then return false end
		if player.Character and part:IsDescendantOf(player.Character) then return false end -- Redundant jika PLAYER_CHARACTER_TAG sudah benar
		return true
	end

	local function removePartFromLOD(part)
		if partsForLOD[part] then
			CollectionService:RemoveTag(part, LOD_MANAGED_TAG) -- Hapus tag saat dikeluarkan
			part.LocalTransparencyModifier = partLODStates[part] and partLODStates[part].originalT or 0 -- Kembalikan ke transparansi awal
			partsForLOD[part] = nil
			partLODStates[part] = nil
			if DEBUG_MODE then log("Part " .. part:GetFullName() .. " dihapus dari LOD.") end
		end
	end

	local function updatePartLOD(part, cameraCFramePosition, cam, deltaTime)
		-- Validasi part sebelum proses, hapus jika tidak valid
		if not part or not part.Parent or not part:IsDescendantOf(workspace) then
			removePartFromLOD(part)
			return false -- Menandakan part tidak valid lagi
		end

		local distance = (cameraCFramePosition - part.Position).Magnitude
		local screenSizeApprox = getScreenSizeApproximation(part, cam) -- Gunakan fungsi yang disesuaikan

		local targetTransparency = 0
		local dynamicMaxDistance = LOD_MAX_DISTANCE_BASE + (part.Size.Magnitude * 0.5)

		if distance > dynamicMaxDistance or screenSizeApprox < LOD_MIN_SIZE_ON_SCREEN_APPROX then
			targetTransparency = 1
		else
			targetTransparency = 0
		end

		local state = partLODStates[part]
		if not state then -- Seharusnya sudah diinisialisasi, tapi sebagai fallback
			state = { currentT = part.LocalTransparencyModifier, targetT = targetTransparency, transitionTime = 0, originalT = part.LocalTransparencyModifier }
			partLODStates[part] = state
		end

		state.targetT = targetTransparency

		if math.abs(state.currentT - state.targetT) > 0.01 then -- Hanya update jika ada perubahan signifikan
			state.transitionTime = math.min(state.transitionTime + deltaTime, LOD_TRANSITION_DURATION)
			local alpha = state.transitionTime / LOD_TRANSITION_DURATION
			-- Interpolasi dari currentT yang sebenarnya, bukan yang terakhir di-assign ke LTM
			local newTransparency = state.currentT + (state.targetT - state.currentT) * alpha
			part.LocalTransparencyModifier = newTransparency

			if state.transitionTime >= LOD_TRANSITION_DURATION then
				part.LocalTransparencyModifier = state.targetT
				state.currentT = state.targetT
				state.transitionTime = 0
			end
		else -- Jika sudah dekat target, snap dan reset
			if part.LocalTransparencyModifier ~= state.targetT then
				part.LocalTransparencyModifier = state.targetT
			end
			state.currentT = state.targetT
			state.transitionTime = 0
		end
		return true -- Menandakan part berhasil diupdate
	end

	local function collectAndTagInitialPartsForLOD()
		log("Memulai koleksi awal untuk LOD Lanjutan...")
		local collectedCount = 0
		partsForLOD = {} -- Reset
		partLODStates = {} -- Reset

		for _, descendant in ipairs(workspace:GetDescendants()) do
			if descendant:IsA("BasePart") and isPartRelevantForLOD(descendant) then
				partsForLOD[descendant] = true
				CollectionService:AddTag(descendant, LOD_MANAGED_TAG)
				partLODStates[descendant] = {
					currentT = descendant.LocalTransparencyModifier,
					targetT = descendant.LocalTransparencyModifier,
					transitionTime = 0,
					originalT = descendant.LocalTransparencyModifier -- Simpan transparansi original
				}
				collectedCount = collectedCount + 1
			end
		end
		log("Mengumpulkan dan memberi tag pada " .. collectedCount .. " part untuk LOD Lanjutan.")
	end

	local function onPartAddedToWorkspaceForLOD(part)
		if part:IsA("BasePart") and isPartRelevantForLOD(part) and not partsForLOD[part] then
			partsForLOD[part] = true
			CollectionService:AddTag(part, LOD_MANAGED_TAG)
			partLODStates[part] = {
				currentT = part.LocalTransparencyModifier,
				targetT = part.LocalTransparencyModifier,
				transitionTime = 0,
				originalT = part.LocalTransparencyModifier
			}
			if DEBUG_MODE then log("Part ditambahkan secara dinamis ke LOD: " .. part:GetFullName()) end
		end
	end
    
    -- Tidak perlu onPartRemovedFromLOD karena AncestryChanged akan menangani
    -- dan validasi di updatePartLOD akan membersihkan.
    -- CollectionService:GetInstanceRemovedSignal(LOD_MANAGED_TAG) juga tidak perlu
    -- karena jika part dihapus, dia akan otomatis keluar dari tag.

	try(function()
		collectAndTagInitialPartsForLOD()

		addManagedConnection(workspace.DescendantAdded:Connect(function(descendant)
			task.defer(onPartAddedToWorkspaceForLOD, descendant)
		end))
        
        -- Kita tidak akan menggunakan AncestryChanged pada setiap part untuk performa.
        -- Sebaliknya, kita akan cek validitas part di dalam loop Heartbeat.

		if next(partsForLOD) then -- Cek jika ada part untuk di-manage
			local partListForIteration = {}
			local currentIndex = 1

			lodHeartbeatConnection = RunService.Heartbeat:Connect(function(deltaTime)
				lastLODUpdateTime = lastLODUpdateTime + deltaTime
				if lastLODUpdateTime < LOD_UPDATE_INTERVAL then return end
				if not camera or not humanoidRootPart or not humanoidRootPart.Parent then
					lastLODUpdateTime = 0
					return
				end
				if next(partsForLOD) == nil then -- Tidak ada part lagi untuk di-proses
                    lastLODUpdateTime = 0
                    return
                end

				local cameraPos = camera.CFrame.Position

				-- Bangun ulang daftar iterasi jika kosong atau indeks melebihi batas
                -- Ini juga menangani part yang mungkin telah dihapus
				if currentIndex > #partListForIteration or #partListForIteration == 0 then
					partListForIteration = {}
					for p, _ in pairs(partsForLOD) do
						table.insert(partListForIteration, p)
					end
					if #partListForIteration == 0 then lastLODUpdateTime = 0; return end
					if DEBUG_MODE then log("Membangun ulang daftar iterasi LOD, jumlah: " .. #partListForIteration) end
					currentIndex = 1
				end

				local partsProcessedThisFrame = 0
				for _ = 1, LOD_PARTS_PER_UPDATE do
					if currentIndex > #partListForIteration then break end -- Keluar jika sudah selesai

					local currentPart = partListForIteration[currentIndex]
					if currentPart then
						if not updatePartLOD(currentPart, cameraPos, camera, deltaTime) then
                            -- Part tidak valid dan sudah dihapus dari 'partsForLOD' oleh updatePartLOD
                            -- Hapus juga dari list iterasi saat ini agar tidak diproses ulang
                            table.remove(partListForIteration, currentIndex)
                            -- Jangan increment currentIndex karena elemen berikutnya sekarang di posisi ini
                            currentIndex = currentIndex -1 -- akan di-increment di akhir loop
                        end
					else
                        -- Part nil di list, mungkin karena dihapus di iterasi sebelumnya
                        table.remove(partListForIteration, currentIndex)
                        currentIndex = currentIndex -1
                    end
					currentIndex = currentIndex + 1
					partsProcessedThisFrame = partsProcessedThisFrame + 1
				end
                if currentIndex > #partListForIteration then currentIndex = 1 end -- Reset jika sudah mencapai akhir

				lastLODUpdateTime = 0
			end)
			addManagedConnection(lodHeartbeatConnection)
			log("Sistem LOD Lanjutan diaktifkan.")
		else
			log("Tidak ada part yang ditemukan untuk pemrosesan LOD, sistem LOD idle.")
		end
	end, "inisialisasi sistem LOD Lanjutan")
end

-- 6. Optimasi Terrain
try(function()
	local terrain = workspace:FindFirstChildOfClass("Terrain")
	if terrain then
		if OPTIMIZATION_LEVEL == "High" then
			terrain.WaterWaveSize = 0
			terrain.WaterWaveSpeed = 0
			terrain.WaterReflectance = 0
			terrain.WaterTransparency = 1 -- Buat air sepenuhnya transparan (hilang)
			terrain.Decoration = false    -- Matikan rumput terrain
			log("Optimasi terrain agresif diterapkan.")
		elseif OPTIMIZATION_LEVEL == "Medium" then
			terrain.WaterWaveSize = terrain.WaterWaveSize * 0.3
			terrain.WaterWaveSpeed = terrain.WaterWaveSpeed * 0.3
			terrain.WaterReflectance = terrain.WaterReflectance * 0.2
			terrain.WaterTransparency = math.min(1, terrain.WaterTransparency + 0.5)
			-- Dekorasi (rumput) bisa dibiarkan aktif di Medium jika diinginkan, atau dikurangi
			-- terrain.Decoration = (some_condition_or_false)
			log("Optimasi terrain medium diterapkan.")
		end
	else
		log("Terrain tidak ditemukan untuk dimodifikasi.")
	end
end, "optimasi terrain")

-- 7. Sederhanakan Efek Lain (Beam, Trail, RopeConstraint)
try(function()
	local otherEffectsCount = 0
	local OTHER_EFFECT_CLASSES = {Beam = true, Trail = true, RopeConstraint = true}

	local function processOtherEffect(obj)
		if not obj or not obj.Parent then return end

		if obj:IsA("Beam") or obj:IsA("Trail") then
			if OPTIMIZATION_LEVEL == "High" then
				if obj.Enabled then obj.Enabled = false; otherEffectsCount = otherEffectsCount + 1 end
			elseif OPTIMIZATION_LEVEL == "Medium" then
				obj.Segments = math.max(1, math.floor(obj.Segments * 0.3))
				if obj:IsA("Trail") then obj.Lifetime = math.max(0.1, obj.Lifetime * 0.4) end
			end
		elseif obj:IsA("RopeConstraint") then
			if OPTIMIZATION_LEVEL == "High" then
				if obj.Visible then obj.Visible = false; otherEffectsCount = otherEffectsCount + 1 end
			elseif OPTIMIZATION_LEVEL == "Medium" then
				-- Mengubah Length bisa merusak fisika, mungkin Thickness lebih aman jika ada properti itu
				-- Atau biarkan saja untuk Medium
				obj.Thickness = obj.Thickness * 0.5 -- Contoh, jika ingin lebih tipis
			end
		end
	end

	for _, descendant in ipairs(workspace:GetDescendants()) do
		if OTHER_EFFECT_CLASSES[descendant.ClassName] then
			processOtherEffect(descendant)
		end
	end
	addManagedConnection(workspace.DescendantAdded:Connect(function(descendant)
		if OTHER_EFFECT_CLASSES[descendant.ClassName] then
			task.defer(processOtherEffect, descendant)
		end
	end))
	if otherEffectsCount > 0 then log("Menonaktifkan/Menyederhanakan " .. otherEffectsCount .. " efek lain.") end
end, "sederhanakan efek lain")

-- 8. Optimasi Suara (Hanya jika High)
if OPTIMIZATION_LEVEL == "High" then
	try(function()
		local soundOptimizedCount = 0
		local MAX_HEARING_DISTANCE_NON_ESSENTIAL = 80

		local function optimizeSound(sound)
			if not sound or not sound.Parent or not sound:IsA("Sound") then return end
			if CollectionService:HasTag(sound, IMPORTANT_SOUND_TAG) then return end

			-- Optimalkan suara yang memiliki RollOffMode atau MaxDistance yang besar
			if sound.RollOffMode == Enum.RollOffMode.InverseTapered or sound.MaxDistance > MAX_HEARING_DISTANCE_NON_ESSENTIAL * 1.2 then
				sound.MaxDistance = math.min(sound.MaxDistance, MAX_HEARING_DISTANCE_NON_ESSENTIAL)
				sound.MinDistance = math.min(sound.MinDistance, MAX_HEARING_DISTANCE_NON_ESSENTIAL * 0.2) -- Jaga proporsi
				soundOptimizedCount = soundOptimizedCount + 1
			end
		end

		for _, descendant in ipairs(workspace:GetDescendants()) do
			if descendant:IsA("Sound") then optimizeSound(descendant) end
		end
		addManagedConnection(workspace.DescendantAdded:Connect(function(descendant)
			if descendant:IsA("Sound") then task.defer(optimizeSound, descendant) end
		end))
		if soundOptimizedCount > 0 then log("Mengoptimalkan " .. soundOpti
